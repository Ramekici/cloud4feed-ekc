import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState } from '../../app/store';
import { addUsr, deleteUsr, fetchUsers, updateUsr } from './counterAPI';

export interface UsersState {
  value: Array<User>;
  status: 'idle' | 'loading' | 'failed';
  modal: boolean;
}

export interface User {
  id: number;
  name: string;
  email: string;
  gender: string | undefined;
  status: string | undefined;
}

const initialState: UsersState = {
  value: [],
  status: 'idle',
  modal: false,
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const asyncFetchUsers = createAsyncThunk(
  'asyncFetchUsers',
  async () => {
    const response = await fetchUsers();
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);
export const asyncAddUser = createAsyncThunk(
  'asyncAddUser',
  async (data: User) => {
    const response = await addUsr(data);
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);

export const asyncUpdateUser = createAsyncThunk(
  '/public/v2/users/:id',
  async (data: User) => {
    const response = await updateUsr(data);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);



export const deleteUser = createAsyncThunk('/public/v2/users/:id', async ({ id }: { id: number }) => {
  console.log(id)

  const response = await deleteUsr(id);
  console.log(response)
  // The value we return becomes the `fulfilled` action payload
  // return response.data;
  return response;
}
);

export const addUser = createAsyncThunk(
  `/public/v2/users`,
  async (id: string) => {
    const response = await fetchUsers();
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const userSlice = createSlice({
  name: 'user',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setUsers: (state, action: PayloadAction<any>) => {
      state.value = action.payload;
    },
    setModal: (state, action: PayloadAction<boolean>) => {
      state.modal = action.payload;
    },

  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder.addCase(asyncFetchUsers.pending, (state) => {
      state.status = 'loading';
    })
      .addCase(asyncFetchUsers.fulfilled, (state, action) => {
        state.status = 'idle';
        state.value = action.payload;
      })
      .addCase(asyncFetchUsers.rejected, (state) => {
        state.status = 'failed';
      });
    builder
      .addCase(asyncAddUser.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(asyncAddUser.fulfilled, (state, action) => {
        state.status = 'idle';
        state.value = { ...state.value, ...action.payload };
      })
      .addCase(asyncAddUser.rejected, (state) => {
        state.status = 'failed';
      });
      builder
      .addCase(deleteUser.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(deleteUser.fulfilled, (state, action) => {
        state.status = 'idle';
        console.log(action.payload)
        const item = state.value.findIndex(item => item.id === action.payload)
        console.log(item)
        if(item > -1) state.value.splice(item, 1)
        // state.value = { ...state.value, ...action.payload };
      })
      .addCase(deleteUser.rejected, (state) => {
        state.status = 'failed';
      });
  },
});

export const { setUsers, setModal } = userSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectUsers = (state: RootState) => state.user.value;
export const selectModal = (state: RootState) => state.user.modal;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd =
//   (amount: number): AppThunk =>
//   (dispatch, getState) => {
//     const currentValue = selectCount(getState());
//     if (currentValue % 2 === 1) {
//       dispatch(incrementByAmount(amount));
//     }
//   };

export default userSlice.reducer;
