import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState } from '../../app/store';
import { addTodo, fetchTodo } from './commonAPI';


export interface TodosState {
  value: Array<Todos>;
  error: string;
  status: 'idle' | 'loading' | 'failed';
}


export interface Todos {
  due_on: string;
  id: number;
  status: string;
  title: string;
  user_id: number
}



const initialState: TodosState = {
  value: [],
  error: '',
  status: 'idle',
};


export const fetchTodoAsync = createAsyncThunk(
  'fetchTodoAsync',
  async (id: string) => {
    const response = await fetchTodo(id);
    return response;
  }
);

export const addTodoAsync = createAsyncThunk(
  'addTodoAsync',
  async ({ data }: { data: Todos }) => {
    const response = await addTodo(data);
    return response;
  }
);

export const todosSlice = createSlice({
  name: 'todos',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setTodo: (state, action) => {
      state.value = action.payload;
    },
    setErrorTodo: (state, action: PayloadAction<any>) => {
      state.error = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchTodoAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchTodoAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        if (action.payload) {
          state.value = action.payload;
        }

      })
      .addCase(fetchTodoAsync.rejected, (state) => {
        state.status = 'failed';
      });
    builder
      .addCase(addTodoAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(addTodoAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        if (action.payload!.hasOwnProperty('token')) {
          state.error = 'Token is Invalid';
        }
        else if (action.payload !== null) {
          state.value = [...state.value, action.payload];
        }
      })
      .addCase(addTodoAsync.rejected, (state) => {
        state.status = 'failed';
      });
  },
});

export const { setTodo, setErrorTodo } = todosSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectTodos = (state: RootState) => state.todos.value;
export const selectTodosStatus = (state: RootState) => state.todos.status;
export const selectTodosSta = (state: RootState) => state.todos.status;
export const selectErrorTodo = (state: RootState) => state.todos.error;
// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.


export default todosSlice.reducer;
